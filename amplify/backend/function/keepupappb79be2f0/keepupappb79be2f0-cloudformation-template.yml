AWSTemplateFormatVersion: 2010-09-09
Description: Lambda Function resource stack creation using Amplify CLI
Parameters:
  CloudWatchRule:
    Type: String
    Default: NONE
    Description: ' Schedule Expression'
  env:
    Type: String
  storageworkoutsName:
    Type: String
    Default: storageworkoutsName
  storageworkoutsArn:
    Type: String
    Default: storageworkoutsArn
Conditions:
  ShouldNotCreateEnvResources: !Equals
    - !Ref env
    - NONE
Resources:
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Metadata:
      'aws:asset:path': ./src
      'aws:asset:property': Code
    Properties:
      Handler: index.handler
      FunctionName: !If
        - ShouldNotCreateEnvResources
        - keepupappb79be2f0
        - !Join
          - ''
          - - keepupappb79be2f0
            - '-'
            - !Ref env
      Environment:
        Variables:
          ENV: !Ref env
          REGION: !Ref 'AWS::Region'
      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
      Runtime: nodejs12.x
      Layers: []
      Timeout: '25'
      Code:
        S3Bucket: amplify-keepupapp-dev-85710-deployment
        S3Key: amplify-builds/keepupappb79be2f0-4e30414c2b52696c7636-build.zip
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !If
        - ShouldNotCreateEnvResources
        - keepupappLambdaRole50879edc
        - !Join
          - ''
          - - keepupappLambdaRole50879edc
            - '-'
            - !Ref env
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  lambdaexecutionpolicy:
    DependsOn:
      - LambdaExecutionRole
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: lambda-execution-policy
      Roles:
        - !Ref LambdaExecutionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub
              - >-
                arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
              - region: !Ref 'AWS::Region'
                account: !Ref 'AWS::AccountId'
                lambda: !Ref LambdaFunction
          - Effect: Allow
            Action:
              - 'dynamodb:DescribeTable'
              - 'dynamodb:GetItem'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:DeleteItem'
            Resource:
              - !Ref storageworkoutsArn
              - !Join
                - /
                - - !Ref storageworkoutsArn
                  - index/*
Outputs:
  Name:
    Value: !Ref LambdaFunction
  Arn:
    Value: !GetAtt
      - LambdaFunction
      - Arn
  Region:
    Value: !Ref 'AWS::Region'
  LambdaExecutionRole:
    Value: !Ref LambdaExecutionRole
